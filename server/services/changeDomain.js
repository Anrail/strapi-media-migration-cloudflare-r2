'use strict';

const path = require('path');
const fs = require('fs');

module.exports = {
  async changeCDNDomain() {
    const files = await strapi.plugin('upload').service('upload').findMany();
    strapi.log.info(`–ó–Ω–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –∑–º—ñ–Ω–∏ –¥–æ–º–µ–Ω—É.`);

    const newPublicAccessUrl = process.env.CF_PUBLIC_ACCESS_URL;

    for (const file of files) {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ñ–∞–π–ª –≤–∂–µ –Ω–∞ R2
      if (
        file.provider !== 'strapi-provider-cloudflare-r2' &&
        file.provider !== 'cloudflare-r2'
      ) {
        continue;
      }

      try {
        // –û–Ω–æ–≤–ª—é—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π URL —Ñ–∞–π–ª—É
        const oldUrl = file.url;
        const urlObj = new URL(oldUrl);
        const pathname = urlObj.pathname;
        const newUrl = newPublicAccessUrl + pathname;

        // –û–Ω–æ–≤–ª—é—î–º–æ URL —É —Ñ–æ—Ä–º–∞—Ç–∞—Ö (—è–∫—â–æ —î)
        let updatedFormats = null;
        if (file.formats) {
          updatedFormats = {};
          for (const key in file.formats) {
            if (file.formats.hasOwnProperty(key)) {
              const format = file.formats[key];
              const formatUrl = format.url;
              const formatUrlObj = new URL(formatUrl);
              const formatPathname = formatUrlObj.pathname;
              const newFormatUrl = newPublicAccessUrl + formatPathname;
              updatedFormats[key] = {
                ...format,
                url: newFormatUrl,
              };
            }
          }
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ø–∏—Å —Ñ–∞–π–ª—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        await strapi.entityService.update('plugin::upload.file', file.id, {
          data: {
            url: newUrl,
            formats: updatedFormats,
          },
        });

        strapi.log.info(`–î–æ–º–µ–Ω —Ñ–∞–π–ª—É –∑–º—ñ–Ω–µ–Ω–æ: ${file.name}`);
      } catch (error) {
        strapi.log.error(`–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –¥–æ–º–µ–Ω—É —Ñ–∞–π–ª—É ${file.name}: ${error.message}`);
      }
    }
    strapi.log.info('–ó–º—ñ–Ω–∞ –¥–æ–º–µ–Ω—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');

    return { message: '–£—Å—ñ –º–µ–¥—ñ–∞—Ñ–∞–π–ª–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ üöÄ' };
  },
};
